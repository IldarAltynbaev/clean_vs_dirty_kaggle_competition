{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":15282,"databundleVersionId":565187,"sourceType":"competition"}],"dockerImageVersionId":28450,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n\nprint(os.listdir(\"../input\"))\n\n# Any results you write to the current directory are saved as output.\n\nimport zipfile\nwith zipfile.ZipFile('../input/plates.zip', 'r') as zip_obj:\n   # Extract all the contents of zip file in current directory\n   zip_obj.extractall('/kaggle/working/')\n    \nprint('After zip extraction:')\nprint(os.listdir(\"/kaggle/working/\"))\n\ndata_root = '/kaggle/working/plates/'\nprint(os.listdir(data_root))\n\nimport shutil \nfrom tqdm import tqdm\n\ntrain_dir = 'train'\nval_dir = 'val'\n\nclass_names = ['cleaned', 'dirty']\n\nfor dir_name in [train_dir, val_dir]:\n    for class_name in class_names:\n        os.makedirs(os.path.join(dir_name, class_name), exist_ok=True)\n\nfor class_name in class_names:\n    source_dir = os.path.join(data_root, 'train', class_name)\n    for i, file_name in enumerate(tqdm(os.listdir(source_dir))):\n        if i % 6 != 0:\n            dest_dir = os.path.join(train_dir, class_name)             \n        else:\n            dest_dir = os.path.join(val_dir, class_name)\n        shutil.copy(os.path.join(source_dir, file_name), os.path.join(dest_dir, file_name))\n        \n!ls train\n\nimport torch\nimport numpy as np\nimport torchvision\nimport matplotlib.pyplot as plt\nimport time\nimport copy\nimport random\n\nfrom torchvision import transforms, models\nfrom torchvision.transforms import functional\nfrom torch.utils.data import ConcatDataset\nfrom matplotlib.animation import FuncAnimation\nbatch_size = 8","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-12T12:47:03.818624Z","iopub.execute_input":"2024-06-12T12:47:03.819039Z","iopub.status.idle":"2024-06-12T12:47:06.821308Z","shell.execute_reply.started":"2024-06-12T12:47:03.818980Z","shell.execute_reply":"2024-06-12T12:47:06.820392Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"['sample_submission.csv', 'plates.zip']\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 21/21 [00:00<00:00, 4558.55it/s]\n100%|██████████| 21/21 [00:00<00:00, 5172.07it/s]","output_type":"stream"},{"name":"stdout","text":"After zip extraction:\n['plates', '__MACOSX']\n['.DS_Store', 'train', 'test']\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"},{"name":"stdout","text":"cleaned  dirty\n","output_type":"stream"}]},{"cell_type":"code","source":"def prepare_data_set(train_dir,val_dir,batch_size):\n    \n    list_of_train_datasets = []\n    \n    train_transforms = transforms.Compose([\n        transforms.Resize((224, 224)),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n        ])    \n            \n    train_dataset = torchvision.datasets.ImageFolder(train_dir,train_transforms)   \n        \n    list_of_train_datasets.append(train_dataset)\n    print(len(train_dataset))\n    \n    for i in range(50):\n        train_transforms = transforms.Compose([\n        transforms.RandomResizedCrop(224),\n        transforms.RandomHorizontalFlip(),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n        ])    \n            \n        train_dataset = torchvision.datasets.ImageFolder(train_dir,train_transforms)   \n        \n        list_of_train_datasets.append(train_dataset)\n            \n    train_dataset = ConcatDataset(list_of_train_datasets)\n    \n    val_transforms1 = transforms.Compose([\n        transforms.Resize((224, 224)),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\n    val_dataset = torchvision.datasets.ImageFolder(val_dir, val_transforms1)\n    \n    train_dataloader = torch.utils.data.DataLoader(\n        train_dataset, batch_size=batch_size, shuffle=True, num_workers=batch_size)\n    val_dataloader = torch.utils.data.DataLoader(\n        val_dataset, batch_size=batch_size, shuffle=False, num_workers=batch_size)\n    \n    return train_dataloader, val_dataloader\n\ndef show_transformed_image (transrorm, img):\n    mean = np.array([0.485, 0.456, 0.406])\n    std = np.array([0.229, 0.224, 0.225])\n    \n    pic_tensor = transrorm(img)\n    pic_array = pic_tensor.permute(1, 2, 0).numpy()* std + mean\n    \n    rows = 2\n    columns = 2\n    fig = plt.figure(figsize=(10, 7)) \n    fig.add_subplot(rows, columns, 1) \n\n    # showing image \n    plt.imshow(img) \n    plt.axis('off') \n    plt.title(\"Before\") \n\n    # Adds a subplot at the 2nd position \n    fig.add_subplot(rows, columns, 2) \n\n    # showing image \n    plt.imshow(pic_array) \n    plt.axis('off') \n    plt.title(\"After\") \n        \ndef show_input(input_tensor, title=''):\n    mean = np.array([0.485, 0.456, 0.406])\n    std = np.array([0.229, 0.224, 0.225])\n    image = input_tensor.permute(1, 2, 0).numpy()\n    image = std * image + mean\n    plt.imshow(image.clip(0, 1))\n    plt.title(title)\n    plt.show()\n    plt.pause(0.001)\n\ndef set_random_seed(random_seed):\n    torch.manual_seed(random_seed)\n    random.seed(random_seed)\n    np.random.seed(random_seed)","metadata":{"execution":{"iopub.status.busy":"2024-06-12T12:47:06.823613Z","iopub.execute_input":"2024-06-12T12:47:06.823940Z","iopub.status.idle":"2024-06-12T12:47:06.848549Z","shell.execute_reply.started":"2024-06-12T12:47:06.823879Z","shell.execute_reply":"2024-06-12T12:47:06.847576Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"def train_model(model, loss,optimizer, \n                scheduler,accuracy_history_train,accuracy_history_val,\n                epoch_history,train_dataloader,val_dataloader,best_model, num_epochs):    \n    best_val_acc = 0\n    best_train_acc = 0\n    for epoch in range(num_epochs):\n        \n        epoch_history.append(epoch)\n        #print('Epoch {}/{}:'.format(epoch, num_epochs - 1), flush=True)\n\n        # Each epoch has a training and validation phase\n        for phase in ['train', 'val']:\n            if phase == 'train':\n                dataloader = train_dataloader\n                scheduler.step()\n                model.train()  # Set model to training mode\n            else:\n                dataloader = val_dataloader\n                model.eval()   # Set model to evaluate mode\n\n            running_loss = 0.\n            running_acc = 0.\n\n            # Iterate over data.\n            for inputs, labels in tqdm(dataloader):\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n\n                optimizer.zero_grad()\n\n                # forward and backward\n                with torch.set_grad_enabled(phase == 'train'):\n                    preds = model(inputs)\n                    loss_value = loss(preds, labels)\n                    preds_class = preds.argmax(dim=1)\n\n                    # backward + optimize only if in training phase\n                    if phase == 'train':\n                        loss_value.backward()\n                        optimizer.step()\n\n                # statistics\n                running_loss += loss_value.item()\n                #print(preds_class)\n                #print(labels.data)\n                running_acc += (preds_class == labels.data).float().mean()\n\n            epoch_loss = running_loss / len(dataloader)\n            epoch_acc = running_acc / len(dataloader)\n            if phase == 'train':\n                accuracy_history_train.append(epoch_acc.item())\n            else:\n                if epoch_acc.item() >= best_val_acc:\n                    #print('best model - ' + str(epoch_acc.item()) + ' val accuracy')\n                    torch.save(model.state_dict(), '/kaggle/working/best_model.pt')\n                    best_val_acc = epoch_acc.item() \n                \n                    #print(model.state_dict())\n                    #best_model = model.state_dict()\n                accuracy_history_val.append(epoch_acc.item())\n\n            #print('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc), flush=True)\n\n    return model","metadata":{"execution":{"iopub.status.busy":"2024-06-12T12:47:06.849772Z","iopub.execute_input":"2024-06-12T12:47:06.850027Z","iopub.status.idle":"2024-06-12T12:47:06.866359Z","shell.execute_reply.started":"2024-06-12T12:47:06.849977Z","shell.execute_reply":"2024-06-12T12:47:06.865571Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"model = models.resnet152(pretrained=True)\n\n# Disable grad for all conv layers\nfor param in model.parameters():\n    param.requires_grad = False\n\nmodel.fc = torch.nn.Linear(model.fc.in_features, 2)\n\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nmodel = model.to(device)\n\nloss = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=1.0e-3)\n\n# Decay LR by a factor of 0.1 every 7 epochs\n\nscheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=7, gamma=0.1)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-12T12:47:06.867729Z","iopub.execute_input":"2024-06-12T12:47:06.868033Z","iopub.status.idle":"2024-06-12T12:47:15.586164Z","shell.execute_reply.started":"2024-06-12T12:47:06.867978Z","shell.execute_reply":"2024-06-12T12:47:15.585227Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stderr","text":"Downloading: \"https://download.pytorch.org/models/resnet152-b121ed2d.pth\" to /root/.cache/torch/checkpoints/resnet152-b121ed2d.pth\n100%|██████████| 241530880/241530880 [00:01<00:00, 129070562.56it/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"set_random_seed(0)\ntrain_dataloader,val_dataloader = prepare_data_set(train_dir,val_dir,batch_size)\n\nepoch_history = []\naccuracy_history_train = []\naccuracy_history_val = []\nbest_model = 0\ntrain_model(model,\n            loss, \n            optimizer, \n            scheduler, \n            accuracy_history_train,\n            accuracy_history_val,\n            epoch_history,\n            train_dataloader,\n            val_dataloader,\n            best_model,\n            num_epochs=100)\n            \n","metadata":{"execution":{"iopub.status.busy":"2024-06-12T12:47:15.589565Z","iopub.execute_input":"2024-06-12T12:47:15.589892Z","iopub.status.idle":"2024-06-12T13:04:22.221094Z","shell.execute_reply.started":"2024-06-12T12:47:15.589832Z","shell.execute_reply":"2024-06-12T13:04:22.220149Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":6,"outputs":[{"name":"stderr","text":"  0%|          | 0/204 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"32\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 204/204 [00:10<00:00, 19.26it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.62it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.75it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.48it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.85it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.57it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.85it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.48it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.79it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.47it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.90it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.37it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.76it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.51it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.83it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.26it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.69it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.27it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.61it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.20it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.53it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.46it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.66it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.42it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.76it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.54it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.84it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.55it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.69it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.50it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.70it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.39it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.70it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.43it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.66it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.34it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.63it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.17it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.57it/s]\n100%|██████████| 1/1 [00:00<00:00,  3.99it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.68it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.44it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.75it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.32it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.70it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.25it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.71it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.55it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.74it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.48it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.61it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.35it/s]\n100%|██████████| 204/204 [00:10<00:00, 20.35it/s]\n100%|██████████| 1/1 [00:00<00:00,  3.27it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.82it/s]\n100%|██████████| 1/1 [00:00<00:00,  3.29it/s]\n100%|██████████| 204/204 [00:10<00:00, 20.20it/s]\n100%|██████████| 1/1 [00:00<00:00,  3.28it/s]\n100%|██████████| 204/204 [00:10<00:00, 21.86it/s]\n100%|██████████| 1/1 [00:00<00:00,  3.27it/s]\n100%|██████████| 204/204 [00:10<00:00, 20.11it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.34it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.73it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.44it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.78it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.53it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.79it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.47it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.74it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.45it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.75it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.36it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.74it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.13it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.85it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.49it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.75it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.27it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.68it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.23it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.60it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.44it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.73it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.49it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.77it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.42it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.70it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.39it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.72it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.42it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.72it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.19it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.55it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.35it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.71it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.39it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.68it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.46it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.63it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.34it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.73it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.08it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.70it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.21it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.21it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.25it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.63it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.44it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.74it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.22it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.76it/s]\n100%|██████████| 1/1 [00:00<00:00,  3.99it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.71it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.50it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.73it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.34it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.73it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.33it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.64it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.38it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.71it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.46it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.69it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.20it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.69it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.42it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.74it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.35it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.68it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.36it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.78it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.34it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.78it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.33it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.68it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.39it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.82it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.30it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.72it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.40it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.73it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.26it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.67it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.40it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.82it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.34it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.74it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.36it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.64it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.37it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.70it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.40it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.73it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.26it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.61it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.00it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.56it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.19it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.57it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.40it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.59it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.34it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.73it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.53it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.72it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.51it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.67it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.32it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.74it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.36it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.68it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.13it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.65it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.38it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.76it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.35it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.70it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.13it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.67it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.16it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.70it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.42it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.71it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.30it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.69it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.49it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.79it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.48it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.70it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.42it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.64it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.44it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.63it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.43it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.69it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.25it/s]\n100%|██████████| 204/204 [00:09<00:00, 21.61it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.15it/s]\n100%|██████████| 204/204 [00:09<00:00, 20.66it/s]\n100%|██████████| 1/1 [00:00<00:00,  4.30it/s]\n","output_type":"stream"},{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"ResNet(\n  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (relu): ReLU(inplace)\n  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n  (layer1): Sequential(\n    (0): Bottleneck(\n      (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n      (downsample): Sequential(\n        (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): Bottleneck(\n      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (2): Bottleneck(\n      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n  )\n  (layer2): Sequential(\n    (0): Bottleneck(\n      (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n      (downsample): Sequential(\n        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): Bottleneck(\n      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (2): Bottleneck(\n      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (3): Bottleneck(\n      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (4): Bottleneck(\n      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (5): Bottleneck(\n      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (6): Bottleneck(\n      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (7): Bottleneck(\n      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n  )\n  (layer3): Sequential(\n    (0): Bottleneck(\n      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n      (downsample): Sequential(\n        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (2): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (3): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (4): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (5): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (6): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (7): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (8): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (9): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (10): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (11): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (12): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (13): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (14): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (15): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (16): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (17): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (18): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (19): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (20): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (21): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (22): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (23): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (24): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (25): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (26): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (27): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (28): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (29): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (30): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (31): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (32): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (33): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (34): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (35): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n  )\n  (layer4): Sequential(\n    (0): Bottleneck(\n      (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n      (downsample): Sequential(\n        (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): Bottleneck(\n      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n    (2): Bottleneck(\n      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace)\n    )\n  )\n  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n  (fc): Linear(in_features=2048, out_features=2, bias=True)\n)"},"metadata":{}}]},{"cell_type":"code","source":"print(max(accuracy_history_train))\nprint(max(accuracy_history_val))\nplt.figure(figsize=(20,12))\nplt.plot(epoch_history ,accuracy_history_train,label = 'train')\nplt.plot(epoch_history ,accuracy_history_val,label = 'val')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-12T13:20:43.017231Z","iopub.execute_input":"2024-06-12T13:20:43.017561Z","iopub.status.idle":"2024-06-12T13:20:43.441103Z","shell.execute_reply.started":"2024-06-12T13:20:43.017508Z","shell.execute_reply":"2024-06-12T13:20:43.440182Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"0.967524528503418\n1.0\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1440x864 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"test_dir = 'test'\nshutil.copytree(os.path.join(data_root, 'test'), os.path.join(test_dir, 'unknown'))\n\nclass ImageFolderWithPaths(torchvision.datasets.ImageFolder):\n    def __getitem__(self, index):\n        original_tuple = super(ImageFolderWithPaths, self).__getitem__(index)\n        path = self.imgs[index][0]\n        tuple_with_path = (original_tuple + (path,))\n        return tuple_with_path\n    \nval_transforms = transforms.Compose([\n        transforms.Resize((224, 224)),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\ntest_dataset = ImageFolderWithPaths('/kaggle/working/test', val_transforms)\n\ntest_dataloader = torch.utils.data.DataLoader(\n    test_dataset, batch_size=batch_size, shuffle=False, num_workers=0)","metadata":{"execution":{"iopub.status.busy":"2024-06-12T13:20:50.624526Z","iopub.execute_input":"2024-06-12T13:20:50.624813Z","iopub.status.idle":"2024-06-12T13:20:50.647654Z","shell.execute_reply.started":"2024-06-12T13:20:50.624771Z","shell.execute_reply":"2024-06-12T13:20:50.646391Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":14,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileExistsError\u001b[0m                           Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-48095e78d8ed>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtest_dir\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'test'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mshutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopytree\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_root\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'test'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'unknown'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mImageFolderWithPaths\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorchvision\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdatasets\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mImageFolder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__getitem__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.6/shutil.py\u001b[0m in \u001b[0;36mcopytree\u001b[0;34m(src, dst, symlinks, ignore, copy_function, ignore_dangling_symlinks)\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0mignored_names\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    314\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 315\u001b[0;31m     \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmakedirs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdst\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    316\u001b[0m     \u001b[0merrors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    317\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnames\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.6/os.py\u001b[0m in \u001b[0;36mmakedirs\u001b[0;34m(name, mode, exist_ok)\u001b[0m\n\u001b[1;32m    218\u001b[0m             \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 220\u001b[0;31m         \u001b[0mmkdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    221\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m         \u001b[0;31m# Cannot rely on checking for EEXIST, since the operating system\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileExistsError\u001b[0m: [Errno 17] File exists: 'test/unknown'"],"ename":"FileExistsError","evalue":"[Errno 17] File exists: 'test/unknown'","output_type":"error"}]},{"cell_type":"code","source":"model.load_state_dict(torch.load('best_model.pt'))","metadata":{"execution":{"iopub.status.busy":"2024-06-12T13:20:35.840865Z","iopub.execute_input":"2024-06-12T13:20:35.841213Z","iopub.status.idle":"2024-06-12T13:20:36.101192Z","shell.execute_reply.started":"2024-06-12T13:20:35.841154Z","shell.execute_reply":"2024-06-12T13:20:36.100451Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"IncompatibleKeys(missing_keys=[], unexpected_keys=[])"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.eval()\n\nval_predictions = []\nval_img_paths = []\nfor inputs, labels in tqdm(val_dataloader):\n    inputs = inputs.to(device)\n    labels = labels.to(device)\n    with torch.set_grad_enabled(False):\n        preds = model(inputs).argmax(dim=1)\n    val_predictions.append(preds)\n        #orch.nn.functional.softmax(preds, dim=1)[:,1].data.cpu().numpy())\n    #val_img_paths.extend(paths)\n    \n#val_predictions = np.concatenate(val_predictions)","metadata":{"execution":{"iopub.status.busy":"2024-06-12T13:21:03.698237Z","iopub.execute_input":"2024-06-12T13:21:03.698587Z","iopub.status.idle":"2024-06-12T13:21:04.005870Z","shell.execute_reply.started":"2024-06-12T13:21:03.698526Z","shell.execute_reply":"2024-06-12T13:21:04.004978Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stderr","text":"100%|██████████| 1/1 [00:00<00:00,  4.42it/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"val_predictions = torch.cat(val_predictions)","metadata":{"execution":{"iopub.status.busy":"2024-06-12T13:21:06.433598Z","iopub.execute_input":"2024-06-12T13:21:06.433911Z","iopub.status.idle":"2024-06-12T13:21:06.438512Z","shell.execute_reply.started":"2024-06-12T13:21:06.433859Z","shell.execute_reply":"2024-06-12T13:21:06.437570Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"val_predictions","metadata":{"execution":{"iopub.status.busy":"2024-06-12T13:21:08.528269Z","iopub.execute_input":"2024-06-12T13:21:08.528619Z","iopub.status.idle":"2024-06-12T13:21:08.535445Z","shell.execute_reply.started":"2024-06-12T13:21:08.528556Z","shell.execute_reply":"2024-06-12T13:21:08.534479Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"tensor([0, 0, 0, 0, 1, 1, 1, 1], device='cuda:0')"},"metadata":{}}]},{"cell_type":"code","source":"for inputs, labels in tqdm(val_dataloader):\n    #plt.imshow(inputs)\n    #show_input(input_tensor, title='')\n#     show_input(inputs[0,:,:,:])\n#     show_input(inputs[1,:,:,:])\n#     show_input(inputs[2,:,:,:])\n#     show_input(inputs[3,:,:,:])\n#     show_input(inputs[4,:,:,:])\n#     show_input(inputs[5,:,:,:])\n#     show_input(inputs[6,:,:,:])\n#     show_input(inputs[7,:,:,:])\n    print((labels==val_predictions.cpu()).float().mean())\n    break","metadata":{"execution":{"iopub.status.busy":"2024-06-12T13:21:16.425353Z","iopub.execute_input":"2024-06-12T13:21:16.425740Z","iopub.status.idle":"2024-06-12T13:21:16.716925Z","shell.execute_reply.started":"2024-06-12T13:21:16.425678Z","shell.execute_reply":"2024-06-12T13:21:16.715922Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stderr","text":"  0%|          | 0/1 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"tensor(1.)\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.eval()\n\ntest_predictions = []\ntest_img_paths = []\nfor inputs, labels, paths in tqdm(test_dataloader):\n    inputs = inputs.to(device)\n    labels = labels.to(device)\n    with torch.set_grad_enabled(False):\n        preds = model(inputs)\n    test_predictions.append(\n        torch.nn.functional.softmax(preds, dim=1)[:,1].data.cpu().numpy())\n    test_img_paths.extend(paths)\n    \ntest_predictions = np.concatenate(test_predictions)","metadata":{"execution":{"iopub.status.busy":"2024-06-12T13:21:34.524521Z","iopub.execute_input":"2024-06-12T13:21:34.524836Z","iopub.status.idle":"2024-06-12T13:21:41.239137Z","shell.execute_reply.started":"2024-06-12T13:21:34.524788Z","shell.execute_reply":"2024-06-12T13:21:41.238307Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stderr","text":"100%|██████████| 93/93 [00:06<00:00, 13.88it/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"submission_df = pd.DataFrame.from_dict({'id': test_img_paths, 'label': test_predictions})","metadata":{"execution":{"iopub.status.busy":"2024-06-12T13:21:46.160657Z","iopub.execute_input":"2024-06-12T13:21:46.160998Z","iopub.status.idle":"2024-06-12T13:21:46.167075Z","shell.execute_reply.started":"2024-06-12T13:21:46.160939Z","shell.execute_reply":"2024-06-12T13:21:46.166264Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"submission_df['label'] = submission_df['label'].map(lambda pred: 'dirty' if pred > 0.5 else 'cleaned')\nsubmission_df['id'] = submission_df['id'].str.replace('/kaggle/working/test/unknown/', '')\nsubmission_df['id'] = submission_df['id'].str.replace('.jpg', '')\nsubmission_df.set_index('id', inplace=True)\nsubmission_df.head(n=6)","metadata":{"execution":{"iopub.status.busy":"2024-06-12T13:21:48.174458Z","iopub.execute_input":"2024-06-12T13:21:48.174975Z","iopub.status.idle":"2024-06-12T13:21:48.218689Z","shell.execute_reply.started":"2024-06-12T13:21:48.174732Z","shell.execute_reply":"2024-06-12T13:21:48.217989Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"        label\nid           \n0000    dirty\n0001    dirty\n0002    dirty\n0003    dirty\n0004  cleaned\n0005    dirty","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0000</th>\n      <td>dirty</td>\n    </tr>\n    <tr>\n      <th>0001</th>\n      <td>dirty</td>\n    </tr>\n    <tr>\n      <th>0002</th>\n      <td>dirty</td>\n    </tr>\n    <tr>\n      <th>0003</th>\n      <td>dirty</td>\n    </tr>\n    <tr>\n      <th>0004</th>\n      <td>cleaned</td>\n    </tr>\n    <tr>\n      <th>0005</th>\n      <td>dirty</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"submission_df.to_csv(\"submission.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-06-12T13:21:54.808523Z","iopub.execute_input":"2024-06-12T13:21:54.808989Z","iopub.status.idle":"2024-06-12T13:21:54.900149Z","shell.execute_reply.started":"2024-06-12T13:21:54.808781Z","shell.execute_reply":"2024-06-12T13:21:54.899521Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"!rm -rf train val test","metadata":{"execution":{"iopub.status.busy":"2024-06-12T13:21:57.186966Z","iopub.execute_input":"2024-06-12T13:21:57.187265Z","iopub.status.idle":"2024-06-12T13:21:58.185243Z","shell.execute_reply.started":"2024-06-12T13:21:57.187222Z","shell.execute_reply":"2024-06-12T13:21:58.184122Z"},"trusted":true},"execution_count":24,"outputs":[]}]}